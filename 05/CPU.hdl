// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unLastInstrt), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	//to be, or not to be, that is the last instrucction
	Not(in=instruction[15],out=nLastInstr);
	Mux16(a=LASToutM,b=instruction,sel=nLastInstr,out=tmp);

	Or(a=nLastInstr,b=instruction[5],out=LOADA);
	ARegister(in=tmp,load=LOADA,out=A,out[0..14]=addressM);//Sub Bussing still feels like magic
	
	//Does it Register?
	And(a=instruction[15],b=instruction[12],out=AorM);
	Mux16(a=A,b=inM,sel=AorM,out=AM);
	
	//the amount of guesswork
	ALU(x=D,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=LASToutM,out=outM,zr=zr,ng=ng);//Tricky people, going in decrementing order...
	
	//Does it DRegister? (Only update register when were using it)
	And(a=instruction[15],b=instruction[4],out=LOADD);
	DRegister(in=LASToutM,load=LOADD,out=D);
	
	//Of Course we are writing to memory!
	And(a=instruction[15],b=instruction[3],out=writeM);

	//Are We Done Yet?
	Not(in=ng,out=pos);//not not
	Not(in=zr,out=NOTzr);//
	And(a=instruction[15],b=instruction[0],out=jgt);
	And(a=pos,b=NOTzr,out=posNOTzr);
	And(a=jgt,b=posNOTzr,out=OR1);
	And(a=instruction[15],b=instruction[1],out=jeq);
	And(a=jeq,b=zr,out=OR2);
	And(a=instruction[15],b=instruction[2],out=jlt);
	And(a=jlt,b=ng,out=OR3);
	
	//(Did Stuff Change?) If anything completed, go on to next line
	Or(a=OR1,b=OR2,out=ORA);
	Or(a=OR3,b=ORA,out=LOAD);
	PC(in=A,load=LOAD,inc=true,reset=reset,out[0..14]=pc);

}