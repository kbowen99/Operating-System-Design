// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

static int base;
    static int term;
    static int freeMem;

    /** Initializes the class. */
    function void init() {
        let base = 2048;
        let term = 16383;
        let freeMem = base;
        let freeMem[0] = term - base;
        let freeMem[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		if (size < 0) { 
			do Sys.error(5); 
		}
		return Memory.allocFirstFit(size);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array last, current;
		var Array next;
		var boolean gap;
		
		let next = o - 1; 

		if (freeMem = 0) {
			let freeMem = next;
			let freeMem[1] = 0;
			return;
		}
		
		let last = freeMem;
		let current = freeMem[1];
		let gap = false;

		while ((~(current = 0)) & (~gap)) {
			if (~(current[1] = 0)) {
				if (next < current[1]) {
					let last = current;
					let current = current[1];
				}
			} else {
				let gap = true;
			}
		}

		let last[1] = next;
		let next[1] = current;

		return;
    }    
	
	function int allocFirstFit(int size) {
		var Array last, current;
		var Array next;

		let last = null;
		let current = freeMem;

		while (~(current = 0)) {
			if ((current[0] - 1) = size) { 
				do Memory.deleteBlock(last, current);
				return current + 1;
			}
			if (current[0] > (size + 2)) {
				let current[(current[0] - 1) - size] = size + 1;
				let next = current + current[0] - size;
				let current[0] = current[0] - size - 1;
				return next;
			}
			let last = current;
			let current = current[1];
		}

		do Sys.error(6); // shit be broke
		return null;
    }
	
	function void deleteBlock(int last, int current) {
		if (last = 0) {
			let freeMem = current[1];
		} else {
			let last[1] = current[1];
		}
		return;
	}
}
