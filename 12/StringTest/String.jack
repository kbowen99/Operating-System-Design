// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field int length;
	field int max;
	field Array chars;
	
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		if (maxLength = 0){
			let maxLength = 1;
		}
		let length = 0;
		let max = maxLength;
		let chars = Array.new(maxLength);
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		do chars.dispose();
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		return chars[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		let chars[j] = c;
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		if (length < max){
			let chars[length] = c;
			let length = length + 1;
		}
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		if (length > 0){
			let length = length - 1;
		}
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int intVal,i;
        var boolean neg;
        let intVal = 0;
        if((length > 0) & (chars[0] = 45)){
            let neg = true;
            let i = 1;
        }else{
            let neg = false;
            let i = 0;
        }
		while ((i < length) & (~(chars[i] < 48) & ~(chars[i] > 57))){
            let intVal = (chars[i] - 48) + (intVal * 10);
            let i = i + 1;
        }

        if(neg){
            return -intVal;
        }else{
            return intVal;
        }
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int num) {
		let length = 0;
		if(num < 0){
			let num = -num;
			do appendChar(45);
		}	
		do recursiveSetInt(num);
		return;
    }
	
	method void recursiveSetInt(int num){
        var int nextNum;

        if(num < 10){
            do appendChar(48 + num);
        }else{
            let nextNum = num / 10;
            do recursiveSetInt(nextNum);
            do appendChar(48 + (num - (nextNum * 10)));
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
